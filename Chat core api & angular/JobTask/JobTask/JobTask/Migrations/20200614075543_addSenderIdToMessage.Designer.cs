// <auto-generated />
using JobTask.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobTask.Migrations
{
    [DbContext(typeof(JobTaskDbContext))]
    [Migration("20200614075543_addSenderIdToMessage")]
    partial class addSenderIdToMessage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobTask.Model.Conversation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("User2_ID");

                    b.Property<int>("user1_ID");

                    b.HasKey("ID");

                    b.HasIndex("User2_ID");

                    b.HasIndex("user1_ID");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("JobTask.Model.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<int>("Conversation_ID");

                    b.Property<int>("senderId");

                    b.HasKey("ID");

                    b.HasIndex("Conversation_ID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("JobTask.Model.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("JobTask.Model.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Password");

                    b.Property<int>("Role_id");

                    b.Property<string>("UserName");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Role_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JobTask.Model.Conversation", b =>
                {
                    b.HasOne("JobTask.Model.User", "User2")
                        .WithMany()
                        .HasForeignKey("User2_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobTask.Model.User", "User1")
                        .WithMany()
                        .HasForeignKey("user1_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobTask.Model.Message", b =>
                {
                    b.HasOne("JobTask.Model.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("Conversation_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobTask.Model.User", b =>
                {
                    b.HasOne("JobTask.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Role_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
